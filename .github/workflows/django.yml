name: 🧪 Django CI/CD

on:
  push:
    branches: ["develop", "main", "master"]
  pull_request:
    branches: ["develop", "main", "master"]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_sed
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django flake8 black isort

      - name: 🎨 Check code formatting with Black
        run: |
          black --check --diff .

      - name: 📊 Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: 🔍 Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: ✅ Check Django configuration
        run: |
          python manage.py check --deploy
        env:
          SECRET_KEY: "test-secret-key-for-ci"
          DATABASE_URL: "postgres://postgres:postgres@localhost:5432/test_sed"
          REDIS_URL: "redis://localhost:6379/0"

      - name: 🔄 Run migrations
        run: |
          python manage.py migrate
        env:
          SECRET_KEY: "test-secret-key-for-ci"
          DATABASE_URL: "postgres://postgres:postgres@localhost:5432/test_sed"
          REDIS_URL: "redis://localhost:6379/0"

      - name: 🧪 Run tests with coverage
        run: |
          coverage run --source='.' manage.py test --verbosity=2
          coverage report --show-missing
          coverage xml
        env:
          SECRET_KEY: "test-secret-key-for-ci"
          DATABASE_URL: "postgres://postgres:postgres@localhost:5432/test_sed"
          REDIS_URL: "redis://localhost:6379/0"

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🔍 Run Bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: 🛡️ Check dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: sed:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm sed:test python manage.py check

  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [test, security, build-test]
    if: always()

    steps:
      - name: 📊 CI Results Summary
        run: |
          echo "## 📋 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker Build | ${{ needs.build-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ **All checks passed!** Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed.** Please review the errors above." >> $GITHUB_STEP_SUMMARY
          fi
